# 03/02/2025 These were modified for use by LIP on BTC. yantz74 <wnroheryanto@hotmail.com>
#
# This macro was provided by discord user Garrettwp to whom i give my thanks for sharing it with me.
# I have tweaked it a lot.
# They are based on the great Annex magprobe dockable probe macros "#Originally developed by Mental,
# modified for better use on K-series printers by RyanG and Trails", kudos to them.
# That macro as since evolved into a klipper plugin that currently is pending inclusion in klipper,
# more information here, https://github.com/Annex-Engineering/Quickdraw_Probe/tree/main/Klipper_Macros
# User richardjm revised the macro variables and added some functions, thanks a lot
# by standing on the shoulders of giants, lets see if we can see further
#
# the current home for this version is https://github.com/jlas1/Klicky-Probe
# the 1000 values below is to give an error instead of doing something wrong, hopefully, this won't be used is a printer larger than 1 meter

[gcode_macro _lip_variables]
variable_travel_speed:         200    # how fast all other travel moves will be performed when running these macros
variable_move_accel:          1000    # how fast should the toolhead accelerate when moving
variable_z_drop_speed:          20    # how fast the z will lower when moving to the z location to clear the probe

variable_safe_z:         	      20    # Minimum Z for attach/dock and homing functions
variable_enable_z_hop:        True    # set this to false for beds that fall significantly under gravity (almost to Z max)

# if a separate Z endstop switch is in
# use, specify the coordinates of the switch here (Voron).
# Set to 0 to have the probe move to center of bed
variable_z_endstop_x:         0
variable_z_endstop_y:         0

# location to park the toolhead
variable_park_toolhead:      False    # Enable toolhead parking
variable_parkposition_x:       125
variable_parkposition_y:       125
variable_parkposition_z:        30

#Below this remark, you normally do not need to configure
variable_home_backoff_x:        10    # how many mm to move away from the X endstop after homing X
                                      # this is useful for the voron v0 to enable the toolhead to move out of the way to allow an unstricted Y homing
variable_home_backoff_y:        10    # how many mm to move away from the Y endstop after homing Y

variable_override_homing:       ''    # configures what axis to home first
                                      #  '' = default klicky behavior (tries to avoid the hitting the dock)
                                      # 'X' = forces X to home first
                                      # 'Y' = forces Y to home first
# Do not modify below
gcode:
    {% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
    {% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
    {% set Ox = printer['configfile'].config["probe"]["x_offset"]|float %}
    {% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}
    {% set Oz = printer['configfile'].config["probe"]["z_offset"]|float %}

    # If x, y coordinates are set for z endstop, assign them
    {% if z_endstop_x != 0 or z_endstop_y != 0 %}
        SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }
        SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }

    # if no x, y coordinates for z endstop, assume probe is endstop and move toolhead to center of bed
    {% else %}
        SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }
        SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }
    {% endif %}

[gcode_macro _Probe_Variables]
variable_z_endstop_x:               0
variable_z_endstop_y:               0
gcode:

#################
# Homing Override
[homing_override]
axes: xyz
gcode:
  _lip_variables
  {% set lipvar = printer["gcode_macro _lip_variables"] %}
  {% set safe_z = lipvar.safe_z|float %}
  {% set enable_z_hop = lipvar.enable_z_hop %}
  {% set kinematic_z = 0 %}
  {% set z_drop_feedrate = lipvar.z_drop_speed * 60 %}
  {% set travel_feedrate = lipvar.travel_speed * 60 %}
  {% set home_backoff_x = lipvar.home_backoff_x|default(0) %}
  {% set home_backoff_y = lipvar.home_backoff_y|default(0) %}
  {% set override_homing = lipvar.override_homing|default('') %}

  _CheckProbe action=query
  {% set home_x, home_y, home_z = False, False, False %}

  {% if not 'X' in params and not 'Y' in params and not 'Z' in params %}
    {% set home_x, home_y, home_z = True, True, True %}
  {% else %}
    {% if 'X' in params %}
      {% set home_x = True %}
    {% endif %}
    {% if 'Y' in params %}
      {% set home_y = True %}
    {% endif %}
    {% if 'Z' in params %}
      {% set home_z = True %}
    {% endif %}
  {% endif %}

  _entry_point function=homing_override
  _KLICKY_STATUS_HOMING

  # if Z is not homed, do not move the bed if it goes down
  {% if 'z' not in printer.toolhead.homed_axes %}
    {% if enable_z_hop == False %} # Disables safe_z
      #preserve safe_z to use as the SET KINEMATIC Z position, so that the toolhead does not move to pick up the probe
      {% set kinematic_z = safe_z %}
      {% set safe_z = safe_z %}
    {% endif %}
  {% endif %}

  #On the first G28 after motors losing power, moves the Z to safe_z distance, if z_hop is enabled
  {% if 'x' not in printer.toolhead.homed_axes and 'y' not in printer.toolhead.homed_axes and 'z' not in printer.toolhead.homed_axes%}
    SET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}
    M400
    G0 Z{safe_z} F{z_drop_feedrate}
	  {% if home_z != True %} 
      M84
    {% endif %}
  {% else %}
    {% set safe_z = printer.gcode_move.gcode_position.z|float %}
  {% endif %}

  {% if home_z %}
    {% if 'x' not in printer.toolhead.homed_axes and 'y' not in printer.toolhead.homed_axes%}
      {% set home_x, home_y, home_z = True, True, True %}
    {% endif %}
  {% endif %}

  # if the dock is oriented on the Y, first do Y endstop
  {% if ((attachmove_y == 0 and override_homing == '' ) or (override_homing == 'Y'))%}
    # Home y
    {% if home_y %}
      {% if 'z' in printer.toolhead.homed_axes and printer.gcode_move.gcode_position.z < safe_z %}
        G0 Z{safe_z} F{z_drop_feedrate}
      {% endif %}
      {% if printer["gcode_macro _HOME_Y"] is defined %}
        _HOME_Y
      {% else %}
        G28 Y0
        # does it need to back away from the home position
        {% if home_backoff_y != 0 %}
          {% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}
            G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}
          {% else %}
            G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}
          {% endif %}
        {% endif %}
      {% endif %}
    {% endif %}
    {% set home_y = False %}
  {% endif %}

  # Home x
  {% if home_x %}
    {% if 'z' in printer.toolhead.homed_axes and printer.gcode_move.gcode_position.z < safe_z %}
      G0 Z{safe_z} F{z_drop_feedrate}
    {% endif %}
    {% if printer["gcode_macro _HOME_X"] is defined %}
      _HOME_X
    {% else %}
      G28 X0
      # does it need to back away from the home position
      {% if home_backoff_x != 0 %}
        {% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}
          G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}
        {% else %}
          G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}
        {% endif %}
      {% endif %}
    {% endif %}
  {% endif %}

  # Home y
  {% if home_y %}
    {% if 'z' in printer.toolhead.homed_axes and printer.gcode_move.gcode_position.z < safe_z %}
      G0 Z{safe_z} F{z_drop_feedrate}
    {% endif %}
    {% if printer["gcode_macro _HOME_Y"] is defined %}
      _HOME_Y
    {% else %}
      G28 Y0
      {% if home_backoff_y != 0 %}
        {% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}
          G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}
        {% else %}
          G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}
        {% endif %}
      {% endif %}
    {% endif %}
  {% endif %}

  # Home z
  {% if home_z %}
    {% if 'z' in printer.toolhead.homed_axes and printer.gcode_move.gcode_position.z < safe_z %}
      G0 Z{safe_z} F{z_drop_feedrate}
    {% endif %}

    _Home_Z_

  {% endif %}

  _CheckProbe action=query
  # park the toolhead
  _Park_Toolhead

  _exit_point function=homing_override
  _KLICKY_STATUS_READY

# Home Z Routine
[gcode_macro _Home_Z_]
gcode:
  {% set probevar = printer["gcode_macro _Probe_Variables"] %}
  {% set z_endstop_x = probevar.z_endstop_x %}
  {% set z_endstop_y = probevar.z_endstop_y %}
  {% set lipvar = printer["gcode_macro _lip_variables"] %}
  {% set safe_z = lipvar.safe_z|float %}
  {% set travel_feedrate = lipvar.travel_speed * 60 %}
  {% set z_drop_feedrate = lipvar.z_drop_speed * 60 %}

  _entry_point function=Home_Z

  # if x and y are not homed yet, raise error
  {% if not 'xy' in printer.toolhead.homed_axes %}
    { action_raise_error("Must Home X and Y Axis First!") }
  {% else %}
    {% if not 'z' in printer.toolhead.homed_axes %}
      SET_KINEMATIC_POSITION Z=0
    {% endif %}

    # Move tool to safe homing position and home Z axis
    # location of z endstop
    G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}
    G28 Z0
    G0 Z{safe_z} F{z_drop_feedrate}

  {% endif %}

  _exit_point function=Home_Z

[gcode_macro _CheckProbe]
variable_probe_state: 0
gcode:
  Query_Probe
  #_SetProbeState action={ params.ACTION }

[gcode_macro _Park_Toolhead]
gcode:
  {% set lipvar = printer["gcode_macro _lip_variables"] %}
    {% set park_toolhead = lipvar.park_toolhead %}
    {% set parkposition_x = lipvar.parkposition_x %}
    {% set parkposition_y = lipvar.parkposition_y %}
    {% set parkposition_z = lipvar.parkposition_z %}
    {% set travel_feedrate = lipvar.travel_speed * 60 %}

    _entry_point function=Park_Toolhead

    {% if park_toolhead and 'xyz' in printer.toolhead.homed_axes %}
        {% if parkposition_z == -128 %}
            G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}

        {% else %}

            G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}

        {% endif %}

    {% endif %}
    _exit_point function=Park_Toolhead

[gcode_macro _exit_point]
gcode:
    {% set function  = 'pre_' ~ params.FUNCTION %}
    {% set move  = params.MOVE|default(0) %}
    {% set speed = printer["gcode_macro _lip_variables"].travel_speed %}

    # mandatory to save the new safe position
    M400
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
    RESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}

[gcode_macro _klicky_status_homing]
gcode:
    {% if printer['gcode_macro status_homing'] is defined %}
        STATUS_HOMING
    {% endif %}

[gcode_macro _klicky_status_ready]
gcode:
    {% if printer['gcode_macro status_ready'] is defined %}
        _KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"
        STATUS_READY
    {% endif %}
