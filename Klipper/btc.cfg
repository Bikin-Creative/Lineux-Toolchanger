[include ./btc_variables.cfg]  # Required

[input_shaper]                 # Required for input shaper, do not delete

[gcode_macro _UPDATE_FRONTEND]
gcode:
  # Somehow SET_GCODE_VARIABLE is case sensitive.
  # Since Fluidd is using a lowercase Tx macro name,
  # we need to use lowercase names, too.
  {% set tool_current_asperbtc = printer["gcode_macro _btc_Variables"].tool_current_asperbtc %}
  {% set numoftool = printer["gcode_macro _btc_Variables"].numoftool %}
  {% for toolnumber in numoftool %}
    {% set active = toolnumber == tool_current_asperbtc %}

    {% if "active" in printer["gcode_macro t" ~ toolnumber] %}
      { action_respond_info("Setting tool " ~ toolnumber ~ " active: " ~ active) }
      SET_GCODE_VARIABLE MACRO=t{toolnumber} VARIABLE=active VALUE={active}
    {% endif %}

    {% if printer["gcode_macro _btc_Variables"].btc_enable_spoolman_integration %}
      {% if active and "spool_id" in printer["gcode_macro t" ~ toolnumber] %}
        { action_respond_info("Tool " ~ toolnumber ~ " is active. Active spool is now " ~ printer["gcode_macro t" ~ toolnumber].spool_id) }
        SET_ACTIVE_SPOOL ID={ printer["gcode_macro t" ~ toolnumber].spool_id }
      {% endif %}
    {% endif %}
  {% endfor %}

  {% if printer["gcode_macro _btc_Variables"].btc_enable_spoolman_integration and tool_current_asperbtc == -1 %}
    { action_respond_info("No tool is active; clearing active spool") }
    CLEAR_ACTIVE_SPOOL
  {% endif %}

### start Printer start routine ###
[delayed_gcode start_check_carriage]
initial_duration: 3
gcode:
  {% set numoftool = [] %}
  {% for tools in range(6) %}
    {% if printer["gcode_macro t" + tools|string] is defined %}
      _start_populate_tools TOOLNUMBER={tools}
      { action_respond_info("BTC: Tool %d is defined" % (tools)) }
    {% endif %}
  {% endfor %}
  Check_Carriage
  _start_check_second
  {% if printer["gcode_macro Dockslide_Home"] is defined %}
    { action_respond_info("BTC: Dockslide is in use") }
    SET_GCODE_VARIABLE MACRO=_btc_Variables VARIABLE=use_dockslide VALUE=True
  {% else %}
    { action_respond_info("BTC: Dockslide is not in use") }
  {% endif %}
  {% set base_limit_accel = printer.toolhead.max_accel %}
  {% set base_limit_scv = printer.toolhead.square_corner_velocity %}
  SET_GCODE_VARIABLE MACRO=_btc_Variables VARIABLE=base_limit_accel VALUE={base_limit_accel}
  SET_GCODE_VARIABLE MACRO=_btc_Variables VARIABLE=base_limit_scv VALUE={base_limit_scv}

[gcode_macro _start_populate_tools]
gcode:
  {% set numoftool = printer["gcode_macro _btc_Variables"].numoftool + [params.TOOLNUMBER|int] %}
  SET_GCODE_VARIABLE MACRO=_btc_Variables VARIABLE=numoftool VALUE='{numoftool}'

[gcode_macro _start_check_second]
gcode:
  {% if printer["gcode_macro _btc_Variables"].tool_current_asperbtc == -1 %}
    { action_respond_info("BTC: Carriage has no tool on startup!") }
  {% endif %}
### end Printer start routine ###

### start Check state of carriage ###
[gcode_macro Check_Carriage]
gcode:
  { action_respond_info("BTC: Check carriage start. Setting carriage to NO TOOL") }
  SET_GCODE_VARIABLE MACRO=_btc_Variables VARIABLE=tool_current_asperbtc VALUE=-1
  {% for toolnumber in printer["gcode_macro _btc_Variables"].numoftool %}
    _checkasperbtc TOOLNUMBER={toolnumber}
  {% endfor %}
  _UPDATE_FRONTEND

[gcode_macro _checkasperbtc]
gcode:
  {% if printer["gcode_macro _btc_Variables"].tool_current_asperbtc < 0 %}
    query_probe
    _CHECK_CARRIAGE_SECOND TOOLNUMBER={params.TOOLNUMBER|default(0)|int}
  {% endif %}

[gcode_macro _CHECK_CARRIAGE_SECOND]
gcode:
  {% set toolnumber = params.TOOLNUMBER|default(0)|int %}
  {% set frompickup = params.FROMPICKUP|default(0)|int %}
  {% set toolvar = printer["gcode_macro _Variables_t" + toolnumber|string] %}
  {% set tool_xoffset = toolvar.xoffset|float %}
	{% set tool_yoffset = toolvar.yoffset|float %}
	{% set tool_zoffset = toolvar.zoffset|float %}
  {% set tool_shaperfreq_x = toolvar.shaperfreq_x %}
  {% set tool_shaperfreq_y = toolvar.shaperfreq_y %}
  {% set tool_shapertype_x = toolvar.shapertype_x %}
  {% set tool_shapertype_y = toolvar.shapertype_y %}
  #{% set tool_pressure_advance = toolvar.pressure_advance %}
  #{% set tool_pressure_advance_smooth_time = toolvar.pressure_advance_smooth_time %}
  {% set btcvar = printer["gcode_macro _btc_Variables"] %}
  {% set tool_z_hop = btcvar.btc_z_hop %}
  {% set inc_leds = btcvar.btc_inc_leds %}
  {% set tool_zoffset = toolvar.zoffset %}
  {% set z_adjust = btcvar.gcode_offset_z_adjust %}
  {% set tool_approachlocation_z = btcvar.tool_approachlocation_z %}

  {% set toolatcarriage = False %}
  {% if btcvar.carriage_sense_switch and printer["gcode_button carriagesense_t" + toolnumber|string].state == "PRESSED" %}
    {% set toolatcarriage = True %}
  {% elif not btcvar.carriage_sense_switch and not printer.probe.last_query %}
    {% set toolatcarriage = True %}
  {% endif %}
  {% if toolatcarriage %}
    { action_respond_info("BTC: T%d at carriage" % (toolnumber)) }
    SET_GCODE_VARIABLE MACRO=_btc_Variables VARIABLE=tool_current_asperbtc VALUE={toolnumber}
    {% if frompickup == 1 %}
      status_active_tool{toolnumber}
    {% endif %}
    {% if toolnumber == 0 %}
      ACTIVATE_EXTRUDER EXTRUDER=extruder
    {% else %}
      ACTIVATE_EXTRUDER EXTRUDER=extruder{toolnumber}
    {% endif %}
    {% if 'x' in printer.toolhead.homed_axes and 'y' in printer.toolhead.homed_axes %}
      SET_GCODE_OFFSET X={tool_xoffset} Y={tool_yoffset} move=1	#Apply the nozzle XY offset so that printing proceeds smoothly
      {% if tool_approachlocation_z > 0 %}
        SET_GCODE_OFFSET MOVE=1 Z={tool_zoffset} #apply the z offset before loading the new one to ensure no nozzle crash
        SET_GCODE_OFFSET MOVE=1 Z_ADJUST={z_adjust}
        { action_respond_info("BTC: Z offset now %f (adjusted by %f)" % (tool_zoffset, z_adjust)) }
      {% endif %}
    {% endif %}
    SET_INPUT_SHAPER SHAPER_FREQ_X={tool_shaperfreq_x} SHAPER_FREQ_Y={tool_shaperfreq_y} SHAPER_TYPE_X={tool_shapertype_x} SHAPER_TYPE_Y={tool_shapertype_y}
    #SET_PRESSURE_ADVANCE ADVANCE={tool_pressure_advance} SMOOTH_TIME={tool_pressure_advance_smooth_time}
    {% if frompickup == 1 %}
      {% if tool_z_hop != 0 %}
        SAVE_GCODE_STATE NAME=TOOL_ZHOP_STATE
        G91
        G0 Z-{tool_z_hop}
        RESTORE_GCODE_STATE NAME=TOOL_ZHOP_STATE
      {% endif %}
      {% set fanspeed = printer["gcode_macro _btc_Variables"].last_fan_speed|float %}
      {% if fanspeed > 0 %}
        #M106 S{fanspeed}
        M107
        SET_FAN_SPEED FAN=partfan{toolnumber} SPEED={fanspeed|float}
      {% endif %}
      { action_respond_info("BTC: Setting partfan%d to %f" % (toolnumber, fanspeed)) }
    {% endif %}
  {% else %}
    { action_respond_info("BTC: T%d not at carriage" % (toolnumber)) }
    SET_GCODE_VARIABLE MACRO=_btc_Variables VARIABLE=tool_current_asperbtc VALUE=-1
    {% if frompickup == 1 %}
      {% if printer['print_stats'].state == "printing" %}
        { action_respond_info("BTC: Tool %s not detected at carriage!! Pausing print..." % (toolnumber)) }
        pause
      {% else %}
        { action_raise_error("BTC: Tool %s not detected at carriage!!" % (toolnumber)) }
      {% endif %}
    {% endif %}
  {% endif %}
### end Check state of carriage ###

### start Check dock state ###
[gcode_macro _check_dock_third]
gcode:
  {% set toolnumber = params.TOOLNUMBER|default(0)|int %}
  {% set fromdropoff = params.FROMDROPOFF|default(0)|int %}
  {% set dock_state = printer['gcode_button docksense_t' + toolnumber|string].state %}
  
  {% if dock_state == "PRESSED" %}
    { action_respond_info("BTC: T%d at dock" % (toolnumber)) }
    SET_GCODE_VARIABLE MACRO=_btc_Variables VARIABLE=tool_current_asperbtc VALUE=-1
    {% if fromdropoff == 1 %}
      {% set tool_z_hop = printer["gcode_macro _btc_Variables"].btc_z_hop %}
      {% set inc_leds = printer["gcode_macro _btc_Variables"].btc_inc_leds %}
      status_standby_tool{toolnumber}
      {% if frompickup != True %}
      {% else %}
        SET_GCODE_VARIABLE MACRO=_btc_Variables VARIABLE=from_pickup VALUE=False
      {% endif %}
      SET_GCODE_VARIABLE MACRO=_btc_Variables VARIABLE=from_pickup VALUE=False
    {% endif %}
  {% else %}
    { action_respond_info("BTC: T%d not at dock" % (toolnumber)) }
    {% if fromdropoff == 1 %}
      {% if printer['print_stats'].state == "printing" %}
        { action_respond_info("BTC: Tool %s not detected at dock!! Pausing print..." % (toolnumber)) }
        pause
      {% else %}
        { action_raise_error("BTC: Tool %s not detected at dock!!" % (toolnumber)) }
      {% endif %}
    {% endif %}
  {% endif %}
### end Check dock state ###

### start Tool pickup routine ###
[gcode_macro Tool_Pickup]
gcode:
  {% if 'xy' in printer.toolhead.homed_axes %}
    Check_Carriage
    _tool_pickup_second TOOLNUMBER={params.TOOLNUMBER|default(0)|int} FROMHOMING={params.FROMHOMING|default(0)|int}
  {% else %}
    { action_raise_error("Must home xy first!") }
  {% endif %}
  _UPDATE_FRONTEND

[gcode_macro _tool_pickup_second]
gcode:
  {% set toolnumber = params.TOOLNUMBER|default(0)|int %}
  {% set fromhoming = params.FROMHOMING|default(0)|int %}
  {% set btcvar = printer["gcode_macro _btc_Variables"] %}
  {% set tool_z_hop = btcvar.btc_z_hop %}
  {% set tool_current_asperbtc = btcvar.tool_current_asperbtc %}
  {% set use_dockslide = btcvar.use_dockslide %}
  {% set performed_dropoff = False %}
  {% if tool_current_asperbtc != toolnumber %}
    {% if tool_z_hop != 0 %}
      SAVE_GCODE_STATE NAME=TOOL_ZHOP_STATE
      G91
      G0 Z{tool_z_hop}
      RESTORE_GCODE_STATE NAME=TOOL_ZHOP_STATE
    {% endif %}
    {% if tool_current_asperbtc > -1 %}
      { action_respond_info("BTC: Pickup tool %d, active tool is %d. Now dropping off active tool" % (toolnumber, tool_current_asperbtc)) }
      SET_GCODE_VARIABLE MACRO=_btc_Variables VARIABLE=from_pickup VALUE=True
      {% if fromhoming == 1 %}
        {% set toolvars = printer["gcode_macro _Variables_t" + tool_current_asperbtc|string] %}
        {% set tool_xoffset = toolvars.xoffset|float * -1 %}
	      {% set tool_yoffset = toolvars.yoffset|float * -1%}
        SET_GCODE_OFFSET X={tool_xoffset} Y={tool_yoffset} move=1	#Apply the nozzle XY offset so that printing proceeds smoothly
      {% endif %}
      Tool_Dropoff TOOLNUMBER={tool_current_asperbtc} FROMPICKUP=1
      {% set performed_dropoff = True %}
    {% endif %}
    { action_respond_info("BTC: Pickup tool %d" % (toolnumber)) }
    {% set tool_travel_feedrate = btcvar.btc_travel_speed * 60 %}
    {% set tool_change_feedrate = btcvar.btc_toolchange_speed * 60 %}
    {% set tool_wipe_feedrate = btcvar.btc_wipe_speed * 60 %}
    {% set base_limit_accel = btcvar.base_limit_accel %}
    {% set base_limit_scv = btcvar.base_limit_scv %}
    {% set z_adjust = btcvar.gcode_offset_z_adjust %}
    {% set sling_mode = btcvar.sling_mode %}
    {% set toolvar = printer["gcode_macro _Variables_t" + toolnumber|string] %}
    {% set pickup_approachlocation = toolvar.pickup_approachlocation %}
    {% set pickup_moves = toolvar.pickup_moves %}
    {% set tool_zoffset = toolvar.zoffset %}
    {% if not sling_mode %}
      SET_GCODE_OFFSET MOVE=1 Z={tool_zoffset} #apply the z offset before loading the new one to ensure no nozzle crash
      SET_GCODE_OFFSET MOVE=1 Z_ADJUST={z_adjust}
    {% else %}
      SET_GCODE_OFFSET MOVE=1 Z=0
      SET_GCODE_OFFSET MOVE=1 Z_ADJUST=0
    {% endif %}
    { action_respond_info("BTC: Z offset now %f (adjusted by %f)" % (tool_zoffset, z_adjust)) }
    {% set last_limit_accel = printer.toolhead.max_accel %}
    {% set last_limit_scv = printer.toolhead.square_corner_velocity %}
    SET_VELOCITY_LIMIT ACCEL={base_limit_accel} SQUARE_CORNER_VELOCITY={base_limit_scv}
    SAVE_GCODE_STATE NAME=TOOL_PICKUP_STATE
    {% if pickup_approachlocation|length == 4 %}
      {% set xtxt, ytxt, ztxt = "", "", "" %}
      {% if pickup_approachlocation[0] != -128 %}
        {% set xtxt = "X" + pickup_approachlocation[0]|string %}
      {% endif %}
      {% if pickup_approachlocation[1] != -128 %}
        {% set ytxt = "Y" + pickup_approachlocation[1]|string %}
      {% endif %}
      {% if pickup_approachlocation[2] != -128 %}
        {% set ztxt = "Z" + pickup_approachlocation[2]|string %}
      {% endif %}
      { action_respond_info("BTC: Move to approach location %s %s %s F%d" % (xtxt, ytxt, ztxt, pickup_approachlocation[3] * 60)) }
      G0 {xtxt} {ytxt} {ztxt} F{pickup_approachlocation[3] * 60}
      M400
      {% for movepos in range(pickup_moves|length) %}
        {% set topos = pickup_moves[movepos].split(',') %}
        {% if topos|length == 4 %}
          {% set xtxt, ytxt, ztxt = "", "", "" %}
          {% if topos[0]|int != -128 %}
            {% set xtxt = "X" + topos[0]|string %}
          {% endif %}
          {% if topos[1]|int != -128 %}
            {% set ytxt = "Y" + topos[1]|string %}
          {% endif %}
          {% if topos[2]|int != -128 %}
            {% set ztxt = "Z" + topos[2]|string %}
          {% endif %}
          { action_respond_info("BTC: Move to position %d %s %s %s F%d" % (movepos, xtxt, ytxt, ztxt, topos[3]|int * 60)) }
          G0 {xtxt} {ytxt} {ztxt} F{topos[3]|int * 60}
        {% else %}
          {topos[0]}
        {% endif %}
      {% endfor %}
    {% else %}
      { action_raise_error("BTC: pickup_approachlocation variable not exactly 4 fields!!") }
    {% endif %}
    RESTORE_GCODE_STATE NAME=TOOL_PICKUP_STATE
    SET_VELOCITY_LIMIT ACCEL={last_limit_accel} SQUARE_CORNER_VELOCITY={last_limit_scv}
    _CHECK_CARRIAGE_SECOND TOOLNUMBER={toolnumber} FROMPICKUP=1
  {% endif %}
### end Tool pickup routine ###

### start Tool dropoff routine ###
[gcode_macro Tool_Dropoff]
gcode:
  {% if 'xy' in printer.toolhead.homed_axes %}
    {% if params.FROMPICKUP|default(0)|int != 1 %}
      Check_Carriage
    {% else %}
      {% set frompickuptxt = "FROMPICKUP=1" %}
    {% endif %}
    _tool_dropoff_second TOOLNUMBER={params.TOOLNUMBER|default(0)|int} {frompickuptxt}
  {% else %}
    { action_raise_error("Must home xy first!") }
  {% endif %}
  _UPDATE_FRONTEND

[gcode_macro _tool_dropoff_second]
gcode:
  {% set toolnumber = params.TOOLNUMBER|default(0)|int %}
  {% set frompickup = params.FROMPICKUP|default(0)|int %}
  {% set btcvar = printer["gcode_macro _btc_Variables"] %}
  {% set tool_current_asperbtc = btcvar.tool_current_asperbtc|int %}
  {% set use_dockslide = btcvar.use_dockslide %}
  {% if toolnumber == tool_current_asperbtc|int %}
    { action_respond_info("BTC: Dropoff tool %d, active tool is %s - Proceeding dropoff" % (toolnumber, tool_current_asperbtc)) }
    {% set tool_travel_feedrate = toolvar.btc_travel_speed * 60 %}
    {% set tool_change_feedrate = toolvar.btc_toolchange_speed * 60 %}
    {% set base_limit_accel = btcvar.base_limit_accel %}
    {% set base_limit_scv = btcvar.base_limit_scv %}
    {% set sling_mode = btcvar.sling_mode %}
    {% set toolvar = printer["gcode_macro _Variables_t" + toolnumber|string] %}
    {% set dropoff_approachlocation = toolvar.dropoff_approachlocation %}
    {% set dropoff_moves = toolvar.dropoff_moves %}
    SET_GCODE_OFFSET MOVE=1 X=0 Y=0		#set XY offset to zero so that the docking is not misaligned
    {% set last_limit_accel = printer.toolhead.max_accel %}
    {% set last_limit_scv = printer.toolhead.square_corner_velocity %}
    SET_VELOCITY_LIMIT ACCEL={base_limit_accel} SQUARE_CORNER_VELOCITY={base_limit_scv}
    SAVE_GCODE_STATE NAME=TOOL_DROPOFF_STATE
    {% if sling_mode %}
      SET_GCODE_OFFSET MOVE=1 Z=0
    {% endif %}
    {% if dropoff_approachlocation|length == 4 %}
      {% set xtxt, ytxt, ztxt = "", "", "" %}
      {% if dropoff_approachlocation[0] != -128 %}
        {% set xtxt = "X" + dropoff_approachlocation[0]|string %}
      {% endif %}
      {% if dropoff_approachlocation[1] != -128 %}
        {% set ytxt = "Y" + dropoff_approachlocation[1]|string %}
      {% endif %}
      {% if dropoff_approachlocation[2] != -128 %}
        {% set ztxt = "Z" + dropoff_approachlocation[2]|string %}
      {% endif %}
      { action_respond_info("BTC: Move to approach location %s %s %s F%d" % (xtxt, ytxt, ztxt, dropoff_approachlocation[3] * 60)) }
      G0 {xtxt} {ytxt} {ztxt} F{dropoff_approachlocation[3] * 60}
      M400
      {% for movepos in range(dropoff_moves|length) %}
        {% set topos = dropoff_moves[movepos].split(',') %}
        {% if topos|length == 4 %}
          {% set xtxt, ytxt, ztxt = "", "", "" %}
          {% if topos[0]|int != -128 %}
            {% set xtxt = "X" + topos[0]|string %}
          {% endif %}
          {% if topos[1]|int != -128 %}
            {% set ytxt = "Y" + topos[1]|string %}
          {% endif %}
          {% if topos[2]|int != -128 %}
            {% set ztxt = "Z" + topos[2]|string %}
          {% endif %}
          { action_respond_info("BTC: Move to position %d %s %s %s F%d" % (movepos, xtxt, ytxt, ztxt, topos[3]|int * 60)) }
          G0 {xtxt} {ytxt} {ztxt} F{topos[3]|int * 60}
        {% else %}
          {% if topos[0]|string != "Dockslide_Park" %}
            {topos[0]}
          {% else %}
            {% if frompickup != 1 %}
              {topos[0]}
            {% endif %}
          {% endif %}
        {% endif %}
      {% endfor %}
    {% else %}
      { action_raise_error("BTC: dropoff_approachlocation variable not exactly 4 fields!!") }
    {% endif %}
    RESTORE_GCODE_STATE NAME=TOOL_DROPOFF_STATE
    SET_VELOCITY_LIMIT ACCEL={last_limit_accel} SQUARE_CORNER_VELOCITY={last_limit_scv}
    M400
    _check_dock_third TOOLNUMBER={toolnumber} FROMDROPOFF=1
  {% else %}
    { action_raise_error("BTC: Dropoff tool %d but active tool is %s, aborting" % (toolnumber, tool_current_asperbtc)) }
  {% endif %}
### end Tool dropoff routine ###

### start Fan and temperature override ###
[gcode_macro M106]
gcode:
  {% if params.S is defined %}
    {% set converted_speeds = params.S|int / 255 %}
    {% if converted_speeds > 1 %}
      {% set converted_speed = 1 %}
    {% else %}
      {% set converted_speed = converted_speeds %}
    {% endif %}
  {% else %}
    {% set converted_speed = 1.0 %}
  {% endif %}
  {% if params.P is defined %}
    SET_FAN_SPEED FAN=partfan{params.P} SPEED={converted_speed|float}
  {% else %}
    {% set curtool = printer["gcode_macro _btc_Variables"].tool_current_asperbtc %}
    M107
    SET_FAN_SPEED FAN=partfan{curtool} SPEED={converted_speed|float}
    SET_GCODE_VARIABLE MACRO=_btc_Variables VARIABLE=last_fan_speed VALUE={converted_speed}
  {% endif %}

[gcode_macro M107]
gcode:
  {% if params.P is defined %}
    SET_FAN_SPEED FAN=partfan{params.P} SPEED=0.0
  {% else %}
    {% set numoftool = printer["gcode_macro _btc_Variables"].numoftool %}
    {% for toolnumber in numoftool %}
      SET_FAN_SPEED FAN=partfan{toolnumber} SPEED=0.0
    {% endfor %}
  {% endif %}

########################################################################################
# This override was created by Ellis @ https://ellis3dp.com as part of his Useful Macros
# Modified for use in Btc
[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set btc_temp_allow = printer["gcode_macro _btc_Variables"].btc_temp_allow %}
    {% set s = params.S|float %}
    {% if params.T is defined %}
      {% set p = params.T|int %}
      M104 S{s} T{p}  ; Set hotend temp
      {% if p == 0 %}
        {% set extrudernum = "" %}
      {% else %}
        {% set extrudernum = p %}
      {% endif %}
      {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder{extrudernum} MINIMUM={s-btc_temp_allow} ; MAXIMUM={s+1+btc_temp_allow}   ; Wait for hotend temp (within 1 degree)
      {% endif %}
    {% else %}
      M104 S{s}  ; Set hotend temp
      {% set toolcurrent = printer.toolhead.extruder %}
      {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR={toolcurrent} MINIMUM={s-btc_temp_allow} ; MAXIMUM={s+1+btc_temp_allow}   ; Wait for hotend temp (within 1 degree)
      {% endif %}
    {% endif %}
########################################################################################
### end Fan and temperature override ###

### default nozzle wiping ######################################
[gcode_macro WIPE_NOZZLE]
gcode:
  {% set direction = params.DIRECTION|default(-1)|int %}
  {% set feed = printer["gcode_macro _btc_Variables"].btc_wipe_speed * 60 %}
  {% set pos_x = printer.toolhead.position.x %}
  {% set pos_y = printer.toolhead.position.y %}

  {% if direction > 0 %} # Dock at rear
    G0 Y{pos_y - 15} F{feed}
    G0 Y{pos_y - 2}
    G0 Y{pos_y - 15}
    G0 Y{pos_y - 2}
  {% else %} # Dock at front
    G0 Y{pos_y + 15} F{feed}
    G0 Y{pos_y + 2}
    G0 Y{pos_y + 15}
    G0 Y{pos_y + 2}
  {% endif %}
### end default nozzle wiping ##################################
  
########################################################################################
[gcode_macro Get_Tool_States]
gcode:
  {% for toolnumber in printer["gcode_macro _btc_Variables"].numoftool %}
    {% set at_carriage = printer["gcode_button carriagesense_t" + toolnumber|string].state == 'PRESSED' %}
    {% set at_dock = printer['gcode_button docksense_t' + toolnumber|string].state == 'PRESSED' %}

    { action_respond_info("Tool %d: carriage:%s dock:%s" % (toolnumber, 'yes' if at_carriage else 'no', 'yes' if at_dock else 'no')) }
  {% endfor %}

  { action_respond_info("If you expected something different, you may need to negate the gcode_buttons") }
########################################################################################

########################################################################################
# Example for startup usage:
# [delayed_gcode startup_sanity_check]
# initial_duration: 3
# gcode:
#   Sanity_Check_Tools
########################################################################################
[gcode_macro _Sanity_Check_Tools_Error]
gcode:
  # Default behaviour: emergency stop
  {% set FAILURE = params.FAILURE|default(0)|int %}
  {% set PAUSE = params.PAUSE|default(0)|int %}
  {% set ERROR = params.ERROR|string %}
  {% if FAILURE == 1 %}
    { action_raise_error(ERROR) }
  {% elif PAUSE == 1 %}
    { action_respond_info(ERROR) }
    PAUSE
  {% else %}
    { action_emergency_stop(ERROR) }
  {% endif %}

[gcode_macro Sanity_Check_Tools]
gcode:
  # Default behaviour: emergency stop
  {% set FAILURE = params.FAILURE|default(0)|int %}
  {% set PAUSE = params.PAUSE|default(0)|int %}

  {% set tools_at_carriage = [] %}
  {% for toolnumber in printer["gcode_macro _btc_Variables"].numoftool %}
    {% set at_carriage = printer["gcode_button carriagesense_t" + toolnumber|string].state == 'PRESSED' %}
    {% set at_dock = printer['gcode_button docksense_t' + toolnumber|string].state == 'PRESSED' %}

    {% if at_carriage %}
      {% set _ = tools_at_carriage.append(toolnumber) %}
    {% endif %}

    {% if at_carriage and at_dock %}
      _Sanity_Check_Tools_Error FAILURE={FAILURE} PAUSE={PAUSE} ERROR="Tool {toolnumber} is marked as being at carriage and dock at the same time."
    {% endif %}

    {% if not at_carriage and not at_dock %}
      _Sanity_Check_Tools_Error FAILURE={FAILURE} PAUSE={PAUSE} ERROR="It seems the front fell off! Tool {toolnumber} is marked as neither at the carriage nor at the dock. Has it fallen off?"
    {% endif %}
  {% endfor %}

  {% if tools_at_carriage|length > 1 %}
    {% set error = "More than one tool is marked as being at the carriage:\n" %}
    {% for t in tools_at_carriage %}
      {% set error = "%s    - %d\n" % (error, t) %}
    {% endfor %}

    _Sanity_Check_Tools_Error FAILURE={FAILURE} PAUSE={PAUSE} ERROR="{error}"
  {% endif %}
########################################################################################

[gcode_macro Leds_Off]
gcode:
  {% for toolnumber in printer["gcode_macro _btc_Variables"].numoftool %}
    status_unused_tool{toolnumber}
    Nozzle_Led_Off{toolnumber}
  {% endfor %}
