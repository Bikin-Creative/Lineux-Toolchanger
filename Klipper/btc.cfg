[include ./btc_variables.cfg]  # Required
[include ./tool_0.cfg]         # Required
#[include ./tool_1.cfg]         # Required if second tool available, and so on
[include ./bashed_macros.cfg]  # Comment out once done at least 100 iterations of toolchange
#[include ./btc_nudge.cfg]     # Uncomment when doing tool alignment using zruncho nudge tool
#[include ./dockslide.cfg]     # Uncomment if using Dockslide
[input_shaper]                 # Required for input shaper, do not delete

### start Printer start routine ###
[delayed_gcode start_check_carriage]
initial_duration: 3
gcode:
  Check_Carriage
  _start_check_second
  {% if printer["gcode_macro Dockslide_Home"] is defined %}
    { action_respond_info("BTC: Dockslide is in use") }
    SET_GCODE_VARIABLE MACRO=_btc_Variables VARIABLE=use_dockslide VALUE=True
  {% else %}
    { action_respond_info("BTC: Dockslide is not in use") }
  {% endif %}

[gcode_macro _start_check_second]
gcode:
  {% set toolnumber = printer["gcode_macro _btc_Variables"].tool_current_asperbtc %}
  {% if toolnumber == -1 %}
    { action_respond_info("BTC: Carriage has no tool on startup!") }
  {% endif %}
### end Printer start routine ###

### start Check state of carriage ###
[gcode_macro Check_Carriage]
gcode:
  { action_respond_info("BTC: Check carriage start. Setting carriage to NO TOOL") }
  {% set numoftool = printer["gcode_macro _btc_Variables"].numoftool %}
  SET_GCODE_VARIABLE MACRO=_btc_Variables VARIABLE=tool_current_asperbtc VALUE=-1
  {% for toolnumber in numoftool %}
    _checkasperbtc TOOLNUMBER={toolnumber}
  {% endfor %}

[gcode_macro _checkasperbtc]
gcode:
  {% set toolnumber = params.TOOLNUMBER|default(0)|int %}
  {% set tool_current_asperbtc = printer["gcode_macro _btc_Variables"].tool_current_asperbtc %}
  {% if tool_current_asperbtc < 0 %}
    _CHECK_CARRIAGE_SECOND TOOLNUMBER={toolnumber}
  {% endif %}

[gcode_macro _CHECK_CARRIAGE_SECOND]
gcode:
  {% set toolnumber = params.TOOLNUMBER|default(0)|int %}
  {% set frompickup = params.FROMPICKUP|default(0)|int %}
  {% set carriage_state = printer["gcode_button carriagesense_t" + toolnumber|string].state %}
  {% set toolvar = printer["gcode_macro _Variables_t" + toolnumber|string] %}
  {% set tool_xoffset = toolvar.xoffset|float %}
	{% set tool_yoffset = toolvar.yoffset|float %}
	{% set tool_zoffset = toolvar.zoffset|float %}
  {% set tool_shaperfreq_x = toolvar.shaperfreq_x %}
  {% set tool_shaperfreq_y = toolvar.shaperfreq_y %}
  {% set tool_shapertype_x = toolvar.shapertype_x %}
  {% set tool_shapertype_y = toolvar.shapertype_y %}
  {% set tool_pressure_advance = toolvar.pressure_advance %}
  {% set tool_pressure_advance_smooth_time = toolvar.pressure_advance_smooth_time %}
  {% set tool_z_hop = printer["gcode_macro _btc_Variables"].btc_z_hop %}
  {% set inc_leds = printer["gcode_macro _btc_Variables"].btc_inc_leds %}

  {% if carriage_state == "RELEASED" %}
    { action_respond_info("BTC: T%d at carriage" % (toolnumber)) }
    SET_GCODE_VARIABLE MACRO=_btc_Variables VARIABLE=tool_current_asperbtc VALUE={toolnumber}
    {% if inc_leds %}
      status_active_tool{toolnumber}
    {% else %}
      ### use klipper built-in led command
    {% endif %}
    {% if toolnumber == 0 %}
      ACTIVATE_EXTRUDER EXTRUDER=extruder
    {% else %}
      ACTIVATE_EXTRUDER EXTRUDER=extruder{toolnumber}
    {% endif %}
    {% if 'x' in printer.toolhead.homed_axes and 'y' in printer.toolhead.homed_axes %}
      SET_GCODE_OFFSET X={tool_xoffset} Y={tool_yoffset} move=1	#Apply the nozzle XY offset so that printing proceeds smoothly
    {% endif %}
    SET_INPUT_SHAPER SHAPER_FREQ_X={tool_shaperfreq_x} SHAPER_FREQ_Y={tool_shaperfreq_y} SHAPER_TYPE_X={tool_shapertype_x} SHAPER_TYPE_Y={tool_shapertype_y}
    SET_PRESSURE_ADVANCE ADVANCE={tool_pressure_advance} SMOOTH_TIME={tool_pressure_advance_smooth_time}
    {% if frompickup == 1 %}
      {% if tool_z_hop != 0 %}
        SAVE_GCODE_STATE NAME=TOOL_ZHOP_STATE
        G91
        G0 Z-{tool_z_hop}
        RESTORE_GCODE_STATE NAME=TOOL_ZHOP_STATE
      {% endif %}
      {% set fanspeed = printer["gcode_macro _btc_Variables"].last_fan_speed|float %}
      {% if fanspeed > 0 %}
        #M106 S{fanspeed}
        M107
        SET_FAN_SPEED FAN=partfan{toolnumber} SPEED={fanspeed|float}
      {% endif %}
      { action_respond_info("BTC: Setting partfan%d to %f" % (toolnumber, fanspeed)) }
    {% endif %}
  {% else %}
    { action_respond_info("BTC: T%d not at carriage" % (toolnumber)) }
    SET_GCODE_VARIABLE MACRO=_btc_Variables VARIABLE=tool_current_asperbtc VALUE=-1
    {% if frompickup == 1 %}
      { action_respond_info("BTC: Tool %s not detected at carriage!! Pausing print..." % (toolnumber)) }
      pause
    {% endif %}
  {% endif %}
### end Check state of carriage ###

### start Check dock state ###
[gcode_macro _check_dock_third]
gcode:
  {% set toolnumber = params.TOOLNUMBER|default(0)|int %}
  {% set fromdropoff = params.FROMDROPOFF|default(0)|int %}
  {% set dock_state = printer['gcode_button docksense_t' + toolnumber|string].state %}
  {% if dock_state == "RELEASED" %}
    { action_respond_info("BTC: T%d at dock" % (toolnumber)) }
    SET_GCODE_VARIABLE MACRO=_btc_Variables VARIABLE=tool_current_asperbtc VALUE=-1
    {% if fromdropoff == 1 %}
      {% set tool_z_hop = printer["gcode_macro _btc_Variables"].btc_z_hop %}
      {% set inc_leds = printer["gcode_macro _btc_Variables"].btc_inc_leds %}
      status_standby_tool{toolnumber}
      {% if frompickup != True %}
      {% else %}
        SET_GCODE_VARIABLE MACRO=_btc_Variables VARIABLE=from_pickup VALUE=False
      {% endif %}
      SET_GCODE_VARIABLE MACRO=_btc_Variables VARIABLE=from_pickup VALUE=False
    {% endif %}
  {% else %}
    { action_respond_info("BTC: T%d not at dock" % (toolnumber)) }
    {% if fromdropoff == 1 %}
      { action_respond_info("BTC: Tool %s not detected at dock!! Pausing print..." % (toolnumber)) }
      pause
    {% endif %}
  {% endif %}
### end Check dock state ###

### start Tool pickup routine ###
[gcode_macro Tool_Pickup]
gcode:
  {% set toolnumber = params.TOOLNUMBER|default(0)|int %}
  {% set fromhoming = params.FROMHOMING|default(0)|int %}
  {% if 'xy' in printer.toolhead.homed_axes %}
    Check_Carriage
    _tool_pickup_second TOOLNUMBER={toolnumber} FROMHOMING={fromhoming}
  {% else %}
    { action_raise_error("Must home xy first!") }
  {% endif %}

[gcode_macro _tool_pickup_second]
gcode:
  {% set toolnumber = params.TOOLNUMBER|default(0)|int %}
  {% set fromhoming = params.FROMHOMING|default(0)|int %}
  {% set toolvar = printer["gcode_macro _btc_Variables"] %}
  {% set tool_z_hop = toolvar.btc_z_hop %}
  {% set tool_current_asperbtc = toolvar.tool_current_asperbtc %}
  {% set use_dockslide = toolvar.use_dockslide %}
  {% set performed_dropoff = False %}
  {% if tool_current_asperbtc != toolnumber %}
    {% if tool_z_hop != 0 %}
      SAVE_GCODE_STATE NAME=TOOL_ZHOP_STATE
      G91
      G0 Z{tool_z_hop}
      RESTORE_GCODE_STATE NAME=TOOL_ZHOP_STATE
    {% endif %}
    {% if tool_current_asperbtc > -1 %}
      { action_respond_info("BTC: Pickup tool %d, active tool is %d. Now dropping off active tool" % (toolnumber, tool_current_asperbtc)) }
      SET_GCODE_VARIABLE MACRO=_btc_Variables VARIABLE=from_pickup VALUE=True
      {% if fromhoming == 1 %}
        {% set toolvars = printer["gcode_macro _Variables_t" + tool_current_asperbtc|string] %}
        {% set tool_xoffset = toolvars.xoffset|float * -1 %}
	      {% set tool_yoffset = toolvars.yoffset|float * -1%}
        SET_GCODE_OFFSET X={tool_xoffset} Y={tool_yoffset} move=1	#Apply the nozzle XY offset so that printing proceeds smoothly
      {% endif %}
      Tool_Dropoff TOOLNUMBER={tool_current_asperbtc} FROMPICKUP=1
      {% set performed_dropoff = True %}
    {% endif %}
    { action_respond_info("BTC: Pickup tool %d" % (toolnumber)) }
    {% set tool_travel_feedrate = toolvar.btc_travel_speed * 60 %}
    {% set tool_change_feedrate = toolvar.btc_toolchange_speed * 60 %}
    {% set tool_wipe_feedrate = toolvar.btc_wipe_speed * 60 %}
    {% set tool_approachlocation_y = toolvar.tool_approachlocation_y %}
    {% set tool_pickupmove_y = toolvar.tool_pickupmove_y %}
    {% set tool_pickupmove_x = toolvar.tool_pickupmove_x %}
    {% set tool_pickuplocation_x = printer["gcode_macro _Variables_t" + toolnumber|string].pickuplocation_x %}
    {% set tool_zoffset = printer["gcode_macro _Variables_t" + toolnumber|string].zoffset %}
    SET_GCODE_OFFSET MOVE=1 Z={tool_zoffset} #apply the z offset before loading the new one to ensure no nozzle crash
    SAVE_GCODE_STATE NAME=TOOL_PICKUP_STATE
    { action_respond_info("BTC: Move to approach location X%d Y%d" % (tool_pickuplocation_x, tool_approachlocation_y)) }
    G0 X{tool_pickuplocation_x} Y{tool_approachlocation_y} F{tool_travel_feedrate}
    {% if use_dockslide %}
      {% if not performed_dropoff %}
        { action_respond_info("BTC: Dockslide Deploy") }
        Dockslide_Deploy
      {% endif %}
    {% endif %}
    { action_respond_info("BTC: Move to position 2 Y%d" % (tool_approachlocation_y + tool_pickupmove_y)) }
    G0 Y{tool_approachlocation_y + tool_pickupmove_y} F{tool_change_feedrate}
    { action_respond_info("BTC: Move to position 3 X%d" % (tool_pickuplocation_x + tool_pickupmove_x)) }
    G0 X{tool_pickuplocation_x + tool_pickupmove_x}
    M400 # Wait for moves to complete before leaving dock
    { action_respond_info("BTC: Wipe nozzle") }
    {% if tool_pickupmove_y > 0 %} # Dock at rear
      G0 Y{tool_approachlocation_y + tool_pickupmove_y - 15} F{tool_wipe_feedrate}
      G0 Y{tool_approachlocation_y + tool_pickupmove_y - 2}
      G0 Y{tool_approachlocation_y + tool_pickupmove_y - 15}
      G0 Y{tool_approachlocation_y + tool_pickupmove_y - 2}
    {% else %} # Dock at front
      G0 Y{tool_approachlocation_y + tool_pickupmove_y + 15} F{tool_wipe_feedrate}
      G0 Y{tool_approachlocation_y + tool_pickupmove_y + 2}
      G0 Y{tool_approachlocation_y + tool_pickupmove_y + 15}
      G0 Y{tool_approachlocation_y + tool_pickupmove_y + 2}
    {% endif %}
    { action_respond_info("BTC: Move to position 4 Y%d" % (tool_approachlocation_y)) }
    G0 Y{tool_approachlocation_y} F{tool_travel_feedrate}
    {% if use_dockslide %}
      { action_respond_info("BTC: Dockslide Park") }
      Dockslide_Park
    {% endif %}
    RESTORE_GCODE_STATE NAME=TOOL_PICKUP_STATE
    _CHECK_CARRIAGE_SECOND TOOLNUMBER={toolnumber} FROMPICKUP=1
  {% endif %}
### end Tool pickup routine ###

### start Tool dropoff routine ###
[gcode_macro Tool_Dropoff]
gcode:
  {% set toolnumber = params.TOOLNUMBER|default(0)|int %}
  {% set frompickup = params.FROMPICKUP|default(0)|int %}
  {% if 'xy' in printer.toolhead.homed_axes %}
    {% if frompickup != 1 %}
      Check_Carriage
    {% else %}
      {% set frompickuptxt = "FROMPICKUP=1" %}
    {% endif %}
    _tool_dropoff_second TOOLNUMBER={toolnumber} {frompickuptxt}
  {% else %}
    { action_raise_error("Must home xy first!") }
  {% endif %}

[gcode_macro _tool_dropoff_second]
gcode:
  {% set toolnumber = params.TOOLNUMBER|default(0)|int %}
  {% set frompickup = params.FROMPICKUP|default(0)|int %}
  {% set toolvar = printer["gcode_macro _btc_Variables"] %}
  {% set tool_current_asperbtc = toolvar.tool_current_asperbtc|int %}
  {% set use_dockslide = toolvar.use_dockslide %}
  {% if toolnumber == tool_current_asperbtc|int %}
    { action_respond_info("BTC: Dropoff tool %d, active tool is %s - Proceeding dropoff" % (toolnumber, tool_current_asperbtc)) }
    {% set tool_travel_feedrate = toolvar.btc_travel_speed * 60 %}
    {% set tool_change_feedrate = toolvar.btc_toolchange_speed * 60 %}
    {% set tool_dropofflocation_x = printer["gcode_macro _Variables_t" + toolnumber|string].dropofflocation_x %}
    {% set tool_approachlocation_y = toolvar.tool_approachlocation_y %}
    {% set tool_dockmove_y = toolvar.tool_dropoffmove_y %}
    {% set tool_dockmove_x = toolvar.tool_dropoffmove_x %}
    SET_GCODE_OFFSET MOVE=1 X=0 Y=0		#set XY offset to zero so that the docking is not misaligned
    SAVE_GCODE_STATE NAME=TOOL_DROPOFF_STATE
    { action_respond_info("BTC: Move to approach location X%d Y%d" % (tool_dropofflocation_x, tool_approachlocation_y)) }
    G0 X{tool_dropofflocation_x} Y{tool_approachlocation_y} F{tool_travel_feedrate}
    {% if use_dockslide %}
      { action_respond_info("BTC: Dockslide Deploy") }
      Dockslide_Deploy
    {% endif %}
    { action_respond_info("BTC: Move to position 2 Y%d" % (tool_approachlocation_y + tool_dockmove_y)) }
    G0 Y{tool_approachlocation_y + tool_dockmove_y} F{tool_change_feedrate}
    { action_respond_info("BTC: Move to position 3 X%d" % (tool_dropofflocation_x + tool_dockmove_x)) }
    G0 X{tool_dropofflocation_x + tool_dockmove_x}
    { action_respond_info("BTC: Move to position 4 Y%d" % (tool_approachlocation_y)) }
    G0 Y{tool_approachlocation_y} F{tool_travel_feedrate}
    {% if use_dockslide %}
      {% if frompickup != 1 %}
        { action_respond_info("BTC: Dockslide Park") }
        Dockslide_Park
      {% endif %}
    {% endif %}
    RESTORE_GCODE_STATE NAME=TOOL_DROPOFF_STATE
    M400
    _check_dock_third TOOLNUMBER={toolnumber} FROMDROPOFF=1
  {% else %}
    { action_raise_error("BTC: Dropoff tool %d but active tool is %s, aborting" % (toolnumber, tool_current_asperbtc)) }
  {% endif %}
### end Tool dropoff routine ###

### start Fan and temperature override ###
[gcode_macro M106]
gcode:
  {% if params.S is defined %}
    {% set converted_speeds = params.S|int / 255 %}
    {% if converted_speeds > 1 %}
      {% set converted_speed = 1 %}
    {% else %}
      {% set converted_speed = converted_speeds %}
    {% endif %}
  {% else %}
    {% set converted_speed = 1.0 %}
  {% endif %}
  {% if params.P is defined %}
    SET_FAN_SPEED FAN=partfan{params.P} SPEED={converted_speed|float}
  {% else %}
    {% set curtool = printer["gcode_macro _btc_Variables"].tool_current_asperbtc %}
    M107
    SET_FAN_SPEED FAN=partfan{curtool} SPEED={converted_speed|float}
    SET_GCODE_VARIABLE MACRO=_btc_Variables VARIABLE=last_fan_speed VALUE={converted_speed}
  {% endif %}

[gcode_macro M107]
gcode:
  {% if params.P is defined %}
    SET_FAN_SPEED FAN=partfan{params.P} SPEED=0.0
  {% else %}
    {% set numoftool = printer["gcode_macro _btc_Variables"].numoftool %}
    {% for toolnumber in numoftool %}
      SET_FAN_SPEED FAN=partfan{toolnumber} SPEED=0.0
    {% endfor %}
  {% endif %}

########################################################################################
# This override was created by Ellis @ https://ellis3dp.com as part of his Useful Macros
# Modified for use in Btc
[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set btc_temp_allow = printer["gcode_macro _btc_Variables"].btc_temp_allow %}
    {% set s = params.S|float %}
    {% if params.T is defined %}
      {% set p = params.T|int %}
      M104 S{s} T{p}  ; Set hotend temp
      {% if p == 0 %}
        {% set extrudernum = "" %}
      {% else %}
        {% set extrudernum = p %}
      {% endif %}
      {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder{extrudernum} MINIMUM={s-btc_temp_allow} ; MAXIMUM={s+1+btc_temp_allow}   ; Wait for hotend temp (within 1 degree)
      {% endif %}
    {% else %}
      M104 S{s}  ; Set hotend temp
      {% set toolcurrent = printer.toolhead.extruder %}
      {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR={toolcurrent} MINIMUM={s-btc_temp_allow} ; MAXIMUM={s+1+btc_temp_allow}   ; Wait for hotend temp (within 1 degree)
      {% endif %}
    {% endif %}
########################################################################################
### end Fan and temperature override ###

### start Led effect ###########################################
[gcode_macro _btc_stop_led_effect]
gcode:
  {% set toolnumber = params.TOOLNUMBER|default(0)|int %}
  {% set ledpart = params.LEDPART|default(0)|int %}
  {% if toolnumber > -1 and toolnumber < 5 %}
    {% set ledtxt = "neopixel:leds_tool" + toolnumber|string %}
    {% set ledtxt1 = "neopixel:leds_tool" + toolnumber|string + " (1)" %}
    {% set ledtxt2 = "neopixel:leds_tool" + toolnumber|string + " (2-3)" %}
    {% if ledpart == 0 %}
      STOP_LED_EFFECTS LEDS={ledtxt}
    {% elif ledpart == 1 %}
      STOP_LED_EFFECTS LEDS={ledtxt1}
    {% else %}
      STOP_LED_EFFECTS LEDS={ledtxt2}
    {% endif %}
  {% else %}
    {% if ledpart == 0 %}
      {% if (0 in numoftool) %}
        STOP_LED_EFFECTS LEDS="neopixel:leds_tool0"
      {% endif %}
      {% if (1 in numoftool) %}
        STOP_LED_EFFECTS LEDS="neopixel:leds_tool1"
      {% endif %}
      {% if (2 in numoftool) %}
        STOP_LED_EFFECTS LEDS="neopixel:leds_tool2"
      {% endif %}
      {% if (3 in numoftool) %}
        STOP_LED_EFFECTS LEDS="neopixel:leds_tool3"
      {% endif %}
      {% if (4 in numoftool) %}
        STOP_LED_EFFECTS LEDS="neopixel:leds_tool4"
      {% endif %}
    {% elif ledpart == 1 %}
      {% if (0 in numoftool) %}
        STOP_LED_EFFECTS LEDS="neopixel:leds_tool0 (1)"
      {% endif %}
      {% if (1 in numoftool) %}
        STOP_LED_EFFECTS LEDS="neopixel:leds_tool1 (1)"
      {% endif %}
      {% if (2 in numoftool) %}
        STOP_LED_EFFECTS LEDS="neopixel:leds_tool2 (1)"
      {% endif %}
      {% if (3 in numoftool) %}
        STOP_LED_EFFECTS LEDS="neopixel:leds_tool3 (1)"
      {% endif %}
      {% if (4 in numoftool) %}
        STOP_LED_EFFECTS LEDS="neopixel:leds_tool4 (1)"
      {% endif %}
    {% else %}
      {% if (0 in numoftool) %}
        STOP_LED_EFFECTS LEDS="neopixel:leds_tool0 (2-3)"
      {% endif %}
      {% if (1 in numoftool) %}
        STOP_LED_EFFECTS LEDS="neopixel:leds_tool1 (2-3)"
      {% endif %}
      {% if (2 in numoftool) %}
        STOP_LED_EFFECTS LEDS="neopixel:leds_tool2 (2-3)"
      {% endif %}
      {% if (3 in numoftool) %}
        STOP_LED_EFFECTS LEDS="neopixel:leds_tool3 (2-3)"
      {% endif %}
      {% if (4 in numoftool) %}
        STOP_LED_EFFECTS LEDS="neopixel:leds_tool4 (2-3)"
      {% endif %}
    {% endif %}
  {% endif %}
### end Led effect ###########################################

##################################################################
# Klicky probe
# We hijack this macro to make sure attached probe is at Carriage
[gcode_macro _entry_point]
gcode:
  {% if params.FUNCTION == "Attach_Probe" %}
    Check_Carriage
	  _entry_point_second function={params.FUNCTION}
	{% elif params.FUNCTION == "homing_override" %}
	  {% set use_dockslide = printer["gcode_macro _btc_Variables"].use_dockslide %}
	  {% if use_dockslide %}
	    {% set dockslide_status = printer["gcode_macro _dockslide_variables"].dockslide_status %}
	    {% if dockslide_status != 1 %}
	      {% set dockslide_homed = printer["gcode_macro _dockslide_variables"].dockslide_homed %}
	      {% if dockslide_homed %}
	        Dockslide_Park
	      {% else %}
	        Dockslide_Home
	      {% endif %}
	    {% endif %}
	    SET_GCODE_VARIABLE MACRO=_dockslide_variables VARIABLE=doing_homing VALUE=True
	  {% endif %}
	  _entry_point_third function={params.FUNCTION}
	{% else %}
	  _entry_point_third function={params.FUNCTION}
  {% endif %}

[gcode_macro _entry_point_second]
gcode:
  {% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
  {% set curtool = printer["gcode_macro _btc_Variables"].tool_current_asperbtc %}
  {% if probe_attached and curtool != 0 %}
    { action_raise_error("BTC: Probe is attached but T0 not at carriage!!") }
  {% elif curtool != 0 %}
    Tool_Pickup TOOLNUMBER=0 FROMHOMING=1
	  { action_respond_info("BTC: Home XY was not done on T0. Please redo Home XY.") }
  {% endif %}
  {% set use_dockslide = printer["gcode_macro _btc_Variables"].use_dockslide %}
	{% if use_dockslide %}
    SET_GCODE_VARIABLE MACRO=_dockslide_variables VARIABLE=doing_homing VALUE=False
  {% endif %}
  _entry_point_third function={params.FUNCTION}

[gcode_macro _entry_point_third]
gcode:
### Klicky original macros ###
    {% set function  = 'pre_' ~ params.FUNCTION %}
    {% if printer["gcode_macro _User_Variables"] is defined %}
      {% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}
    {% elif printer["gcode_macro _lip_variables"] is defined %}
      {% set move_accel = printer["gcode_macro _lip_variables"].move_accel|default(1000) %}
    {% else %}
      {% set move_accel = 1000 %}
    {% endif %}
    # mandatory to save the new safe position
    M400
    SAVE_GCODE_STATE NAME={function}
    # removes the Z offset for better bed based docking
    SET_GCODE_OFFSET Z=0
    # all the macros initially assume absolute positioning
    G90
    # set a safe(sane) Acceleration
    SET_VELOCITY_LIMIT ACCEL={move_accel}
### end Klicky original macros ###
### End Klicky ########################################################################################################