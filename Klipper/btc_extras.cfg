####################################################################
# These are example macros you can/should use when using toolchanger
# You have to understand fully what each line means/do
# This file is not designed to be included directly in your config,
# these provides examples what your print_start macro should look like
# Please ask in discord if you need help with configuration
####################################################################

# Sample macros:
#
# print_start
# print_end
# homing_override
# bed_mesh_calibrate
# quad_gantry_level
# z_tilt_adjust
#
# PLEASE use these super simple and useful tools before going live!! Thanks to @irrenhaus
# Utility macros:
# Get_Tool_States    - Prints the dock sense and carriage sense switch status for all tools to the console
# Sanity_Check_Tools - Sanity checks the dock sense and carriage sense switches for all tools
#                        If parameter FAILURE is set to 1 this will raise an error if a check is failed (for out-of-print usage)
#                        If parameter PAUSE is set to 1 this will run the PAUSE macro if a check is failed (for in-print usage)
#                        If no parameter is set to 1 this will put the printer into emergency stop is a check is failed (for startup usage)
#
################################################################
# Print Start macro
#	combined print start gcode macro that takes into account temperature from the slicer
[gcode_macro PRINT_START]
gcode:
    {% set tools_used_inprint = [] %}
    {% set BED_TEMP = params.BED_TEMP|default(100)|float %}
    {% set EXTRUDER_TEMP = params.TOOL_TEMP|default(190)|float %}
    {% set cur_tool = params.TOOL|int %}
    {% if params.TEMP_T0 is defined %}
      {% set TEMP_T0 = params.TEMP_T0|float %}
      {% set tools_used_inprint = tools_used_inprint + [0] %}
    {% endif %}
    {% if params.TEMP_T1 is defined %}
      {% set TEMP_T1 = params.TEMP_T1|float %}
      {% set tools_used_inprint = tools_used_inprint + [1] %}
    {% endif %}
    {% if params.TEMP_T2 is defined %}
      {% set TEMP_T2 = params.TEMP_T2|float %}
      {% set tools_used_inprint = tools_used_inprint + [2] %}
    {% endif %}
    {% if params.TEMP_T3 is defined %}
      {% set TEMP_T3 = params.TEMP_T3|float %}
      {% set tools_used_inprint = tools_used_inprint + [3] %}
    {% endif %}
    {% if params.TEMP_T4 is defined %}
      {% set TEMP_T4 = params.TEMP_T4|float %}
      {% set tools_used_inprint = tools_used_inprint + [4] %}
    {% endif %}
    {% if params.TEMP_T5 is defined %}
      {% set TEMP_T5 = params.TEMP_T5|float %}
      {% set tools_used_inprint = tools_used_inprint + [5] %}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_btc_Variables VARIABLE=tools_used_inprint VALUE='{tools_used_inprint}'

    {% set numoftool = printer["gcode_macro _btc_Variables"].numoftool %}
    {% for toolnumber in numoftool %}
      status_unused_tool{toolnumber}
    {% endfor %}
    {% for toolnumber in tools_used_inprint %}
      {% if (toolnumber in numoftool) %}
        status_standby_tool{toolnumber}
        M104 S150 T{toolnumber} ; Set extruder temp 150 to prevent oozing without waiting
      {% else %}
        { action_raise_error("Tool %d is used in this print, but disabled!" % (toolnumber)) }
      {% endif %}
    {% endfor %}
    M190 S{BED_TEMP}            ; Wait for bed to reach temperature
    status_homing
    M117 Homing...                 ; display message
    G28 Y X        ; Home XY
    Attach_Probe_lock       ; Pickup Probe
    G28 z          ; Home Z
    status_leveling
    Z_Tilt_Adjust           ; Z Tilt
    T{cur_tool}
    G1 X0 Y10 F3000          ; Move toolhead to origin
    BED_MESH_PROFILE LOAD=default
    status_heating
    M109 S{EXTRUDER_TEMP}           ; Set and wait for nozzle to reach temperature
    status_busy
    G1 Z0.3 F240
    G92 E0 ;zero the extruded length again
    G1 Y100 E15.0 F1500.0 ; intro line
    G1 X0.4 F5000
    G1 Y10 E30 F1200.0 ; intro line
    G92 E0.0 ;zero the extruded length again
    G1 F9000
    M117 Printing...
    status_printing
########################################################################################

########################################################################################
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script
gcode:
    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    {% set tools_used_inprint = printer["gcode_macro _btc_Variables"].tools_used_inprint %}
    
    #   Check end position to determine safe directions to move
    {% if printer.toolhead.position.x < (max_x - 15) %}
        {% set x_safe = 10.0 %}
    {% else %}
        {% set x_safe = -10.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 15) %}
        {% set y_safe = 10.0 %}
    {% else %}
        {% set y_safe = -10.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 50.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}
    
    #  Commence PRINT_END
    M400                             ; wait for buffer to clear
    status_part_ready
    G92 E0                           ; zero the extruder
    G1 E-4.0 F3600                   ; retract
    G91                              ; relative positioning
    G0 Z{z_safe} + Z10 F3600         ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000    ; move nozzle to remove stringing
    {% for toolnumber in tools_used_inprint %}
      M104 S0 T{toolnumber}                         ; turn off hotend
    {% endfor %}
    M140 S0                          ; turn off bed
    ;M106 S0                          ; turn off fan
    M107                             ; turn off all fans
    G90                              ; absolute positioning
    # G1 X10 Y10                       ; park nozzle at front left
    G0 X{max_x / 2} Y{max_y - 80} F3600   ; park nozzle at rear
    M84
    M117 Finished!
    status_ready
########################################################################################

#####################################################
# This override is taken directly from klicky macros
# You should use this override if using klicky
# Save this override into a cfg file and include it below klicky and btc
[homing_override]
axes: xyz
gcode:
    # collect user state variables
    _User_Variables
    {% set verbose = printer["gcode_macro _User_Variables"].verbose %}
    {% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
    # Safe Z for travel
    {% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
    {% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
    {% set kinematic_z = 0 %}
    {% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}
    {% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0)|float %}
    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
    {% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
    {% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0)|float %}
    {% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0)|float %}
    {% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default('') %}

    #checks if the variable definitions are up to date
    _klicky_check_variables_version

    _CheckProbe action=query

    # reset parameters
    {% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}

    {% if 'PROBE_LOCK' in params%}
        {% if verbose %}
            { action_respond_info("PROBE_LOCK = True") }
        {% endif %}
        {% set leave_probe_attached = True %}
    {% endif %}

    # which axes have been requested for homing
    {% if not 'X' in params
        and not 'Y' in params
        and not 'Z' in params %}

        {% set home_x, home_y, home_z = True, True, True %}
        _KlickyDebug msg="homing_override going to home all axes"

    {% else %}
        {% if 'X' in params %}
            {% set home_x = True %}
             _KlickyDebug msg="homing_override going to home X"

        {% endif %}

        {% if 'Y' in params %}
            {% set home_y = True %}
            _KlickyDebug msg="homing_override going to home Y"
        {% endif %}

        {% if 'Z' in params %}
            {% set home_z = True %}
            _KlickyDebug msg="homing_override going to home Z"
        {% endif %}

        {% if 'X' in params
          and 'Y' in params
          and 'Z' in params %}
            # reset homing state variables
            # if homing all axes
            _Homing_Variables reset=1
            _KlickyDebug msg="homing_override going to home all axes"
         {% endif %}

    {% endif %}

    ### BTC edits ############
	  {% if printer["gcode_macro _btc_Variables"].use_dockslide %}
	    {% if printer["gcode_macro _dockslide_variables"].dockslide_status != 1 %}
	      {% if printer["gcode_macro _dockslide_variables"].dockslide_homed %}
	        Dockslide_Park
	      {% else %}
	        Dockslide_Home
	      {% endif %}
	    {% endif %}
	    SET_GCODE_VARIABLE MACRO=_dockslide_variables VARIABLE=doing_homing VALUE=True
	  {% endif %}
	  ### BTC edits ############
    _entry_point function=homing_override
    _KLICKY_STATUS_HOMING

    # if Z is not homed, do not move the bed if it goes down
    {% if 'z' not in printer.toolhead.homed_axes %}
         {% if enable_z_hop == False %} # Disables safe_z
            _KlickyDebug msg="homing_override z_hop disabled"
            #preserve safe_z to use as the SET KINEMATIC Z position, so that the toolhead does not move to pick up the probe
            {% set kinematic_z = safe_z %}
            {% set safe_z = safe_z %}
        {% endif %}
    {% endif %}

    #On the first G28 after motors losing power, moves the Z to safe_z distance, if z_hop is enabled
    {% if 'x' not in printer.toolhead.homed_axes and 'y' not in printer.toolhead.homed_axes and 'z' not in printer.toolhead.homed_axes%}
        {% if verbose %}
            { action_respond_info("No axis homed") }
        {% endif %}
        _KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"
        SET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}
        M400
        _KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"
        {% if verbose %}
            { action_respond_info("moving to a safe Z distance") }
        {% endif %}
        G0 Z{safe_z} F{z_drop_feedrate}
    	{% if home_z != True %} 
          _KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"
          #M84
          {% endif %}
    {% else %}
        _KlickyDebug msg="All axis homed"
        {% if printer.gcode_move.gcode_position.z > safe_z %} 
          {% set safe_z = printer.gcode_move.gcode_position.z|float %}
          _KlickyDebug msg="Setting Safe_z to {printer.gcode_move.gcode_position.z}mm as Z is now above configured safe_z"
        {% endif %}
    {% endif %}

    {% if home_z %}
        {% if 'x' not in printer.toolhead.homed_axes and 'y' not in printer.toolhead.homed_axes%}
            {% if verbose %}
                { action_respond_info("X or Y not homed, forcing full G28") }
            {% endif %}
            {% set home_x, home_y, home_z = True, True, True %}
        {% endif %}
    {% endif %}

    # if the dock is oriented on the Y, first do Y endstop
    {% if ((attachmove_y == 0 and override_homing == '' ) or (override_homing == 'Y'))%}
        # Home y
        {% if home_y %}
            {% if override_homing == 'Y' %}
              _KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"
            {% else %}
              _KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"
            {% endif %}
            {% if verbose %}
                { action_respond_info("Homing Y") }
            {% endif %}
            {% if 'z' in printer.toolhead.homed_axes and printer.gcode_move.gcode_position.z < safe_z %}
                _KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"
                {% if verbose %}
                    { action_respond_info("moving to a safe Z distance") }
                {% endif %}
                G0 Z{safe_z} F{z_drop_feedrate}
            {% endif %}
            {% if printer["gcode_macro _HOME_Y"] is defined %}
                _KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"
                _HOME_Y
            {% else %}
                _KlickyDebug msg="homing_override Homing Y G28 Y0"
                G28 Y0
                # does it need to back away from the home position
                {% if home_backoff_y != 0 %}
                    {% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}
                        _KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y} F{travel_feedrate}"
                        G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y} F{travel_feedrate}
                    {% else %}
                        _KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y} F{travel_feedrate}"
                        G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y} F{travel_feedrate}
                    {%endif %}
                {%endif %}
            {% endif %}
        {% endif %}
        {% set home_y = False %}
    {% endif %}

    # Home x
    {% if home_x %}
        {% if verbose %}
            { action_respond_info("Homing X") }
        {% endif %}
        {% if 'z' in printer.toolhead.homed_axes and printer.gcode_move.gcode_position.z < safe_z %}
            _KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"
            {% if verbose %}
                { action_respond_info("moving to a safe Z distance") }
            {% endif %}
            G0 Z{safe_z} F{z_drop_feedrate}
        {% endif %}
        {% if printer["gcode_macro _HOME_X"] is defined %}
            _KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"
            _HOME_X
        {% else %}
            _KlickyDebug msg="homing_override Homing X, G28 X0"
            G28 X0
            # does it need to back away from the home position
            {% if home_backoff_x != 0 %}
                {% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}
                    _KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x} F{travel_feedrate}"
                    G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x} F{travel_feedrate}
                {% else %}
                    _KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x} F{travel_feedrate}"
                    G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x} F{travel_feedrate}
                {%endif %}
            {%endif %}
        {% endif %}
        ### Sensorless homing on corexy ############
        G4 P2000
        ### Sensorless homing on corexy ############
    {% endif %}

    # Home y
    {% if home_y %}
        {% if verbose %}
            { action_respond_info("Homing Y") }
        {% endif %}
        {% if 'z' in printer.toolhead.homed_axes and printer.gcode_move.gcode_position.z < safe_z %}
            _KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"
            {% if verbose %}
                { action_respond_info("moving to a safe Z distance") }
            {% endif %}
            G0 Z{safe_z} F{z_drop_feedrate}
        {% endif %}
        {% if printer["gcode_macro _HOME_Y"] is defined %}
            _KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"
            _HOME_Y
        {% else %}
          _KlickyDebug msg="homing_override Homing Y, G28 Y0"
            G28 Y0
            {% if home_backoff_y != 0 %}
                {% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}
                    _KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y} F{travel_feedrate}"
                    G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y} F{travel_feedrate}
                {% else %}
                    _KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y} F{travel_feedrate}"
                    G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y} F{travel_feedrate}
                {%endif %}
            {%endif %}
        {% endif %}
    {% endif %}

    # Home z
    {% if home_z %}
        {% if verbose %}
            { action_respond_info("Homing Z") }
        {% endif %}
        {% if 'z' in printer.toolhead.homed_axes and printer.gcode_move.gcode_position.z < safe_z %}
            _KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"
            {% if verbose %}
                { action_respond_info("moving to a safe Z distance") }
            {% endif %}
            G0 Z{safe_z} F{z_drop_feedrate}
        {% endif %}
        
        # if probe is configured as endstop, attach it, else check if the probe needs to be docked if attached
        {% if 'z_virtual_endstop' in printer['configfile'].config["stepper_z"]["endstop_pin"] %}
            _KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"
            ### BTC edits #############
            Check_Carriage
            _check_carriage_result
            ### BTC edits #############
            Attach_Probe
            {% if leave_probe_attached %}
                _Probe_Lock
            {% endif %}
        {% elif dock_on_zhome == True %}
            Dock_Probe
        {% endif %}
        
        _Home_Z_

        # if probe is configured as endstop, dock it
        {% if 'z_virtual_endstop' in printer['configfile'].config["stepper_z"]["endstop_pin"] %}
            _KlickyDebug msg="homing_override probe no longer required, docking probe"
            Dock_Probe
        {% elif dock_on_zhome == False %}
            Dock_Probe
        {% endif %}
    {% endif %}
    _CheckProbe action=query

    # park the toolhead
    _Park_Toolhead

    _exit_point function=homing_override
    _KLICKY_STATUS_READY

[gcode_macro _check_carriage_result]
gcode:
  {% set curtool = printer["gcode_macro _btc_Variables"].tool_current_asperbtc %}
  {% if printer["gcode_macro _Probe_Variables"].probe_attached and curtool != 0 %}
    { action_raise_error("BTC: Probe is attached but T0 not at carriage!!") }
  {% elif curtool != 0 %}
    Tool_Pickup TOOLNUMBER=0 FROMHOMING=1
	  { action_respond_info("BTC: Home XY was not done on T0. Please redo Home XY.") }
  {% endif %}
	{% if printer["gcode_macro _btc_Variables"].use_dockslide %}
    SET_GCODE_VARIABLE MACRO=_dockslide_variables VARIABLE=doing_homing VALUE=False
  {% endif %}
########################################################################################

########################################################################################
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:
  T0
  _BED_MESH_CALIBRATE {% for p in params %}{'%s=%s ' % (p, params[p])}{% endfor %}
########################################################################################

########################################################################################
[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
gcode:
  T0
  _QUAD_GANTRY_LEVEL {% for p in params %}{'%s=%s ' % (p, params[p])}{% endfor %}
########################################################################################

########################################################################################
[gcode_macro Z_TILT_ADJUST]
rename_existing: _Z_TILT_ADJUST
gcode:
  T0
  _Z_TILT_ADJUST {% for p in params %}{'%s=%s ' % (p, params[p])}{% endfor %}
########################################################################################

########################################################################################
[gcode_macro Z_CALIBRATION_SET_OFFSET_MACRO]
gcode:
  {% set z_offset = params.Z|default(0.0)|float %}
  RESPOND MSG="Forwarding Z offset adjustment of {z_offset} to Lineux"
  SET_GCODE_VARIABLE MACRO=_btc_Variables VARIABLE=gcode_offset_z_adjust VALUE={z_offset}
  SET_GCODE_OFFSET Z_ADJUST={z_offset}
########################################################################################
